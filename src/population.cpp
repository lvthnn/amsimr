// [[Rcpp::depends(RcppArmadillo)]]
#include <RcppArmadillo.h>

//' Evaluate avoidance function for a given state.
//'
//' @param sol The state to evaluate
//' @param phi_m Male phenotypes to enter avoidance function
//' @param phi_f Female phenotypes to enter avoidance function
//' @param w Weights for phenotype-phenotype pairs
//' @return Value of avoidance function
double psi(const arma::vec &rho_sol, const arma::mat &sol,
           const arma::uvec &phi_m, const arma::uvec &phi_f,
           const arma::vec &rho) {}

//' Compute Δ_{\tilde\alpha,\alpha}(j) for phenotype pair j.
//'
//' @param sol The current state matrix
//' @param swap Indices of swapped pairs
//' @param phi_m Male phenotype indices
//' @param phi_f Female phenotype indices
//' @return Vector of Δ values for each phenotype pair
arma::vec compute_delta(const arma::mat &sol, const arma::uvec &swap,
                        const arma::uvec &phi_m, const arma::uvec &phi_f) {
  arma::vec delta = arma::vec(sol.n_elem);
  for (int j = 0; j < phi_m.n_elem; j++) {
    delta[j] =
  }
}

//' Calculate the energy differential for a proposed state
//'
//' @param rho_sol The correlation vector for the current state
//' @param sol The current state
//' @param swap Row indices used to construct proposal state
//' @param phi_m Male phenotype indices
//' @param phi_f Female phenotype indices
//' @param w Weights for phenotype-phenotype pairs
//' @return Difference in avoidance function for proposed and current state
// [[Rcpp::export]]
double dpsi(const arma::vec &rho_sol, const arma::mat &sol,
            const arma::uvec &swap, const arma::uvec &phi_m,
            const arma::uvec &phi_f, const arma::vec &rho) {
  arma::vec delta = compute_delta(sol, swap, phi_m, phi_f);
}

//' Optimise avoidance distribution to produce matching for next generation
//'
//' @param sol Initial solution to start annealing algorithm from
//' @param psi_vec Phenotype pairs for avoidance function
//' @param cf_idx Columns to be exchanged when generating proposal states
//' @param n_iter Number of iterations of annealing algorithm
//' @param alpha_temp Temperature decay parameter for annealing algorithm
//' @param eval Return simulation data for verification
//' @return Final state generated by simulated annealing algorithm
// [[Rcpp::export]]
Rcpp::List optim_matching(arma::mat &sol, const arma::mat &psi_vec,
                          const arma::uvec &cf_idx, int n_iter = 10000,
                          double alpha_temp = 1.0, double temp0 = 5.0,
                          bool eval = false, bool progress = false) {
  int n_pairs = sol.n_rows;
  arma::uvec phi_m = arma::conv_to<arma::uvec>::from(psi_vec.col(0));
  arma::uvec phi_f = arma::conv_to<arma::uvec>::from(psi_vec.col(1));
  arma::vec psi_eval, dpsi_eval, rho_eval, temp_eval;
  arma::vec rho = psi_vec.col(2);
  double temp = temp0;

  arma::vec rho_sol = arma::vec(phi_m.n_elem);

  if (eval) {
    psi_eval.set_size(n_iter);
    dpsi_eval.set_size(n_iter);
    rho_eval.set_size(n_iter);
    temp_eval.set_size(n_iter);
    psi_eval[0] = psi(sol, phi_m, phi_f, rho);
    dpsi_eval[0] = 0.0;
    rho_eval[0] = 1.0;
    temp_eval[0] = temp0;
  }

  for (int i = 1; i < n_iter; i++) {
    arma::uvec swap =
        arma::randi<arma::uvec>(2, arma::distr_param(0, n_pairs - 1));
    double u = Rcpp::as<double>(Rcpp::runif(1));
    double alpha = dpsi();

    if (u < alpha) {
      sol.submat(swap, cf_idx) = sol.submat(arma::reverse(swap), cf_idx);
    }

    if (eval) {
      psi_eval[i] = psi(sol, phi_m, phi_f, w);
      dpsi_eval[i] = dpsi_prop;
      rho_eval[i] = rho_prop;
      temp_eval[i] = temp;
    }

    temp *= alpha_temp;
  }

  if (eval) {
    return Rcpp::List::create(Rcpp::Named("sol") = sol,
                              Rcpp::Named("psi") = Rcpp::wrap(psi_eval),
                              Rcpp::Named("dpsi") = Rcpp::wrap(dpsi_eval),
                              Rcpp::Named("rho") = Rcpp::wrap(rho_eval),
                              Rcpp::Named("temp") = Rcpp::wrap(temp_eval));
  } else {
    return Rcpp::List::create(Rcpp::Named("sol") = sol);
  }
}
