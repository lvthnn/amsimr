// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// generate_gene_matrix
void generate_gene_matrix(int n_population, int n_loci, Rcpp::NumericVector snp_mafs);
RcppExport SEXP _amsimr_generate_gene_matrix(SEXP n_populationSEXP, SEXP n_lociSEXP, SEXP snp_mafsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_population(n_populationSEXP);
    Rcpp::traits::input_parameter< int >::type n_loci(n_lociSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type snp_mafs(snp_mafsSEXP);
    generate_gene_matrix(n_population, n_loci, snp_mafs);
    return R_NilValue;
END_RCPP
}
// optim_matching
Rcpp::List optim_matching(arma::mat& sol_mat, const arma::mat& snp_pairs, const arma::uvec& female_swap_idx, const int num_iterations, const double temp_decay, const double init_temp, const int auto_temp_samples, const double auto_accept_ratio, const bool collect_diagnostics, const bool quietly);
RcppExport SEXP _amsimr_optim_matching(SEXP sol_matSEXP, SEXP snp_pairsSEXP, SEXP female_swap_idxSEXP, SEXP num_iterationsSEXP, SEXP temp_decaySEXP, SEXP init_tempSEXP, SEXP auto_temp_samplesSEXP, SEXP auto_accept_ratioSEXP, SEXP collect_diagnosticsSEXP, SEXP quietlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type sol_mat(sol_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type snp_pairs(snp_pairsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type female_swap_idx(female_swap_idxSEXP);
    Rcpp::traits::input_parameter< const int >::type num_iterations(num_iterationsSEXP);
    Rcpp::traits::input_parameter< const double >::type temp_decay(temp_decaySEXP);
    Rcpp::traits::input_parameter< const double >::type init_temp(init_tempSEXP);
    Rcpp::traits::input_parameter< const int >::type auto_temp_samples(auto_temp_samplesSEXP);
    Rcpp::traits::input_parameter< const double >::type auto_accept_ratio(auto_accept_ratioSEXP);
    Rcpp::traits::input_parameter< const bool >::type collect_diagnostics(collect_diagnosticsSEXP);
    Rcpp::traits::input_parameter< const bool >::type quietly(quietlySEXP);
    rcpp_result_gen = Rcpp::wrap(optim_matching(sol_mat, snp_pairs, female_swap_idx, num_iterations, temp_decay, init_temp, auto_temp_samples, auto_accept_ratio, collect_diagnostics, quietly));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_amsimr_generate_gene_matrix", (DL_FUNC) &_amsimr_generate_gene_matrix, 3},
    {"_amsimr_optim_matching", (DL_FUNC) &_amsimr_optim_matching, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_amsimr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
